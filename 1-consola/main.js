const ProductManager = require('../core/managers/ProductManager'); // üì¶
const SaleManager = require('../core/managers/SaleManager');       // üíµ
const readline = require('readline');                               // üñäÔ∏è

class ConsoleApp {
    constructor() {
        this.productManager = new ProductManager();  // üõçÔ∏è
        this.saleManager = new SaleManager();        // üí≥
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    mostrarMenuPrincipal() {
        console.log('\n=== üè™ SISTEMA DE TIENDA DE BARRIO üè™ ===');
        console.log('1Ô∏è‚É£  Agregar Producto');
        console.log('2Ô∏è‚É£  Ver Todos los Productos');
        console.log('3Ô∏è‚É£  Ver Productos con Stock Bajo');
        console.log('4Ô∏è‚É£  Actualizar Producto');
        console.log('5Ô∏è‚É£  Eliminar Producto');
        console.log('6Ô∏è‚É£  Registrar Venta');
        console.log('7Ô∏è‚É£  Ver Ventas del D√≠a');
        console.log('8Ô∏è‚É£  Ver Ventas Semanales');     
        console.log('9Ô∏è‚É£  Ver Ventas Mensuales');      
        console.log('üîü  Generar PDF Stock Bajo');   
        console.log('üìä 11. Ver Productos M√°s Vendidos'); 
        console.log('üìà 12. Ver Estad√≠sticas Avanzadas');  
        console.log('‚ùå 13. Cancelar Venta');              
        console.log('üö™ 14. Salir');                 

        this.rl.question('\n‚û°Ô∏è Selecciona una opci√≥n: ', (opcion) => {
            switch (opcion) {
                case '1': this.agregarProducto(); break;
                case '2': this.mostrarTodosProductos(); break;
                case '3': this.mostrarProductosStockBajo(); break;
                case '4': this.actualizarProducto(); break;
                case '5': this.eliminarProducto(); break;
                case '6': this.registrarVenta(); break;
                case '7': this.verVentasDelDia(); break;
                case '8': this.verventassemanales(); break;    
                case '9': this.verventasmensuales(); break;     
                case '10': this.generarPDFbajoStock(); break; 
                case '11': this.verProductosMasVendidos(); break;    
                case '12': this.verEstadisticasAvanzadas(); break;   
                case '13': this.cancelarVenta(); break;              
                case '14': this.salir(); break;
                default: 
                    console.log('‚ùå Opci√≥n no v√°lida');
                    this.mostrarMenuPrincipal();
            }
        });
    }

    agregarProducto() {
        console.log('\n‚ûï --- AGREGAR PRODUCTO ---');
        this.rl.question('üìù Nombre: ', (nombre) => {
            this.rl.question('üí∞ Precio de Compra: ', (precioCompra) => {
                this.rl.question('üíµ Precio de Venta: ', (precioVenta) => {
                    this.rl.question('üì¶ Stock: ', (stock) => {
                        this.rl.question('üè∑Ô∏è Categor√≠a: ', (categoria) => {
                            try {
                                const producto = this.productManager.addProduct({
                                    nombre,
                                    precioCompra: parseFloat(precioCompra),
                                    precioVenta: parseFloat(precioVenta),
                                    stock: parseInt(stock),
                                    categoria: categoria || 'General'
                                });
                                console.log('‚úÖ Producto agregado:', producto);
                            } catch (error) {
                                console.log('‚ùå Error:', error.message);
                            }
                            this.mostrarMenuPrincipal();
                        });
                    });
                });
            });
        });
    }

    mostrarTodosProductos() {
        console.log('\nüì¶ --- TODOS LOS PRODUCTOS ---');
        try {
            const productos = this.productManager.getAllProducts();
            if (productos.length === 0) {
                console.log('‚ÑπÔ∏è No hay productos registrados');
            } else {
                productos.forEach((producto, indice) => {
                    console.log(`${indice + 1}. ${producto.nombre} - üíµ Bs.${producto.precio_venta} (Stock: ${producto.stock})`);
                });
            }
        } catch (error) {
            console.log('‚ùå Error:', error.message);
        }
        this.mostrarMenuPrincipal();
    }

    mostrarProductosStockBajo() {
        console.log('\n‚ö†Ô∏è --- PRODUCTOS CON STOCK BAJO ---');
        try {
            const productos = this.productManager.getLowStockProducts();
            if (productos.length === 0) {
                console.log('‚úÖ No hay productos con stock bajo');
            } else {
                console.log(`‚ö†Ô∏è Se encontraron ${productos.length} productos con stock bajo:\n`);
                productos.forEach((producto, indice) => {
                    console.log(`${indice + 1}. ${producto.nombre}`);
                    console.log(`   üì¶ Stock actual: ${producto.stock}`);
                    console.log(`   üè∑Ô∏è Stock m√≠nimo: ${producto.stock_minimo || 5}`);
                    console.log(`   ‚ùó D√©ficit: ${(producto.stock_minimo || 5) - producto.stock} unidades`);
                    console.log('---');
                });
            }
        } catch (error) {
            console.log('‚ùå Error:', error.message);
        }
        this.mostrarMenuPrincipal();
    }

    actualizarProducto() {
        console.log('\n‚úèÔ∏è --- ACTUALIZAR PRODUCTO ---');
        try {
            const productos = this.productManager.getAllProducts();
            if (productos.length === 0) {
                console.log('‚ÑπÔ∏è No hay productos para actualizar');
                return this.mostrarMenuPrincipal();
            }
            
            productos.forEach(producto => {
                console.log(`${producto.id}. ${producto.nombre} - üì¶ Stock: ${producto.stock}`);
            });
            
            this.rl.question('\nüÜî ID del producto a actualizar: ', (id) => {
                const idProducto = parseInt(id);
                const producto = this.productManager.getProductById(idProducto);
                if (!producto) {
                    console.log('‚ùå Producto no encontrado');
                    return this.mostrarMenuPrincipal();
                }
                
                console.log(`\nüîÑ Actualizando: ${producto.nombre}`);
                
                this.rl.question('üìù Nuevo nombre (Enter para mantener actual): ', (nombre) => {
                    this.rl.question('üí∞ Nuevo precio de compra (Enter para mantener actual): ', (precioCompra) => {
                        this.rl.question('üíµ Nuevo precio de venta (Enter para mantener actual): ', (precioVenta) => {
                            this.rl.question('üì¶ Nuevo stock (Enter para mantener actual): ', (stock) => {
                                this.rl.question('üè∑Ô∏è Nueva categor√≠a (Enter para mantener actual): ', (categoria) => {
                                    const datosActualizacion = {};
                                    if (nombre) datosActualizacion.nombre = nombre;
                                    if (precioCompra) datosActualizacion.precio_compra = parseFloat(precioCompra);
                                    if (precioVenta) datosActualizacion.precio_venta = parseFloat(precioVenta);
                                    if (stock) datosActualizacion.stock = parseInt(stock);
                                    if (categoria) datosActualizacion.categoria = categoria;
                                    
                                    try {
                                        const productoActualizado = this.productManager.updateProduct(idProducto, datosActualizacion);
                                        console.log('‚úÖ Producto actualizado:', productoActualizado.nombre);
                                    } catch (error) {
                                        console.log('‚ùå Error:', error.message);
                                    }
                                    this.mostrarMenuPrincipal();
                                });
                            });
                        });
                    });
                });
            });
            
        } catch (error) {
            console.log('‚ùå Error:', error.message);
            this.mostrarMenuPrincipal();
        }
    }

    eliminarProducto() {
        console.log('\nüóëÔ∏è --- ELIMINAR PRODUCTO ---');
        try {
            const productos = this.productManager.getAllProducts();
            if (productos.length === 0) {
                console.log('‚ÑπÔ∏è No hay productos para eliminar');
                return this.mostrarMenuPrincipal();
            }
            
            productos.forEach(producto => {
                console.log(`${producto.id}. ${producto.nombre}`);
            });
            
            this.rl.question('\nüÜî ID del producto a eliminar: ', (id) => {
                const idProducto = parseInt(id);
                const producto = this.productManager.getProductById(idProducto);
                if (!producto) {
                    console.log('‚ùå Producto no encontrado');
                    return this.mostrarMenuPrincipal();
                }
                
                this.rl.question(`‚ö†Ô∏è ¬øEst√°s seguro de eliminar "${producto.nombre}"? (s/n): `, (confirmacion) => {
                    if (confirmacion.toLowerCase() === 's') {
                        try {
                            this.productManager.deleteProduct(idProducto);
                            console.log('‚úÖ Producto eliminado:', producto.nombre);
                        } catch (error) {
                            console.log('‚ùå Error:', error.message);
                        }
                    } else {
                        console.log('‚ùå Eliminaci√≥n cancelada');
                    }
                    this.mostrarMenuPrincipal();
                });
            });
            
        } catch (error) {
            console.log('‚ùå Error:', error.message);
            this.mostrarMenuPrincipal();
        }
    }

    mostrarProductosRapido() {
        console.log('\nüì¶ --- TODOS LOS PRODUCTOS ---');
        try {
            const productos = this.productManager.getAllProducts();
            if (productos.length === 0) {
                console.log('‚ÑπÔ∏è No hay productos registrados');
            } else {
                productos.forEach(producto => {
                console.log(`üÜî ${producto.id} - ${producto.nombre} - üíµ Bs.${producto.precio_venta} (Stock: ${producto.stock})`);
                });
            }
        } catch (error) {
            console.log('‚ùå Error:', error.message);
        }
    }

    registrarVenta() {
        console.log('\nüõí --- REGISTRAR VENTA ---');
    
        this.mostrarProductosRapido();
    
        const ventaProductos = [];
        const saleManager = new SaleManager();
    
        const agregarProducto = () => {
            this.rl.question('üÜî ID del producto a vender (0 para terminar): ', async (id) => {
                if (id === '0') {
                    if (ventaProductos.length === 0) {
                        console.log('‚ùå Debes agregar al menos un producto');
                        agregarProducto();
                        return;
                    }
                    
                    console.log('\nüìã RESUMEN DE VENTA:');
                    let total = 0;
                    ventaProductos.forEach(item => {
                        console.log(`   üõçÔ∏è ${item.nombre} x${item.cantidad} - üíµ Bs.${item.subtotal}`);
                        total += item.subtotal;
                    });
                    console.log(`üí∞ TOTAL: Bs.${total}`);
                    
                    this.rl.question('\nüí≥ M√©todo de pago (efectivo/tarjeta/transferencia): ', (metodo) => {
                        this.rl.question('üíµ Monto recibido: Bs.', async (monto) => {
                            try {
                                const resultado = await saleManager.registerSale(
                                    ventaProductos, 
                                    metodo, 
                                    parseFloat(monto)
                                );
                                console.log(`‚úÖ ${resultado.mensaje}`);
                                console.log(`üì¶ Stock actualizado para ${resultado.productos} productos`);
                            } catch (error) {
                                console.log('‚ùå Error al registrar venta:', error.message);
                            }
                            this.mostrarMenuPrincipal();
                        });
                    });
                    return;
                }
                
                this.rl.question('üî¢ Cantidad: ', (cantidad) => {
                    try {
                        const product = this.productManager.getProductById(parseInt(id));
                        if (!product) throw new Error('Producto no encontrado');
                        if (product.stock < parseInt(cantidad)) throw new Error(`Stock insuficiente. Disponible: ${product.stock}`);
                        
                        const subtotal = product.precio_venta * parseInt(cantidad);
                        ventaProductos.push({
                            productoId: product.id,
                            nombre: product.nombre,
                            cantidad: parseInt(cantidad),
                            precioUnitario: product.precio_venta,
                            subtotal: subtotal
                        });
                        console.log(`‚úÖ ${product.nombre} agregado a la venta`);
                        agregarProducto();
                    } catch (error) {
                        console.log('‚ùå Error:', error.message);
                        agregarProducto();
                    }
                });
            });
        };
        agregarProducto();
    }

    verVentasDelDia() {
        console.log('\nüìä --- VENTAS DEL D√çA ---');
        try {
            const saleManager = new SaleManager();
            const ventas = saleManager.getTodaySales();
            
            if (ventas.length === 0) {
                console.log('‚ÑπÔ∏è No hay ventas registradas hoy');
            } else {
                ventas.forEach(venta => {
                    const fechaUTC = new Date(venta.fecha_hora);
                    const fechaLocal = new Date(fechaUTC.getTime() - 4 * 60 * 60 * 1000); // UTC‚àí4
                    console.log(`üïí ${fechaLocal.toLocaleString()} - üí∞ Total: Bs.${venta.total} - üõçÔ∏è Productos: ${venta.total_productos}`);
                });
                const totalHoy = ventas.reduce((sum, v) => sum + v.total, 0);
                console.log(`üíµ TOTAL DEL D√çA: Bs.${totalHoy}`);
            }
        } catch (error) {
            console.log('‚ùå Error:', error.message);
        }
        this.mostrarMenuPrincipal();
    }

    salir() {
        console.log('üëã ¬°Hasta pronto!');
        this.rl.close();
        process.exit(0);
    }

    iniciar() {
        console.log('üöÄ Iniciando sistema de tienda...');
        this.mostrarMenuPrincipal();
    }

verventassemanales() {
    console.log('\n--- VENTAS SEMANALES ---');
    try {
        const saleManager = new SaleManager();
        const { ventasPorDia, totalesSemana } = saleManager.getWeeklySales();
        
        if (ventasPorDia.length === 0) {
            console.log('üìä No hay ventas en la √∫ltima semana');
        } else {
            console.log('\nüìÖ VENTAS POR D√çA:');
            ventasPorDia.forEach(dia => {
                console.log(`   ${dia.fecha}: ${dia.total_ventas} ventas - Bs.${dia.ingresos_totales}`);
            });
            
            console.log('\nüí∞ TOTALES DE LA SEMANA:');
            console.log(`   Ventas totales: ${totalesSemana.totalVentas}`);
            console.log(`   Ingresos totales: Bs.${totalesSemana.ingresosTotales}`);
            console.log(`   Efectivo: Bs.${totalesSemana.totalEfectivo}`);
            console.log(`   Tarjeta: Bs.${totalesSemana.totalTarjeta}`);
            console.log(`   Transferencia: Bs.${totalesSemana.totalTransferencia}`);
        }
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
    this.mostrarMenuPrincipal();
}

verventasmensuales() {
    console.log('\n--- VENTAS MENSUALES ---');
    try {
        const saleManager = new SaleManager();
        const ventasMensuales = saleManager.getMonthlySales();
        
        if (ventasMensuales.length === 0) {
            console.log('üìä No hay ventas en el √∫ltimo mes');
        } else {
            ventasMensuales.forEach(mes => {
                console.log(`   ${mes.mes}: ${mes.total_ventas} ventas - Bs.${mes.ingresos_totales} (Promedio: Bs.${mes.promedio_por_venta})`);
            });
        }
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
    this.mostrarMenuPrincipal();
}

async generarPDFbajoStock() {
    console.log('\n--- GENERAR PDF DE STOCK BAJO ---');
    try {
        const saleManager = new SaleManager();
        const PdfService = require('../core/services/PdfService');
        
        const productosBajoStock = saleManager.getLowStockProductsByCategory();
        
        if (productosBajoStock.length === 0) {
            console.log('‚úÖ No hay productos con stock bajo');
            this.mostrarMenuPrincipal();
            return;
        }
        
        console.log(`üìã Generando PDF para ${productosBajoStock.length} productos con stock bajo...`);
        
        const pdfService = new PdfService();
        const resultado = await pdfService.generateLowStockReport(productosBajoStock);
        
        console.log(resultado.message);
        console.log(`üìÅ Archivo guardado en: ${resultado.filePath}`);
        
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
    this.mostrarMenuPrincipal();
}

// üìä VER PRODUCTOS M√ÅS VENDIDOS
verProductosMasVendidos() {
    console.log('\nüèÜ --- PRODUCTOS M√ÅS VENDIDOS ---');
    try {
        const productosMasVendidos = this.saleManager.getTopSellingProducts(10);
        
        if (productosMasVendidos.length === 0) {
            console.log('üìä No hay datos de ventas a√∫n');
        } else {
            console.log('\nüèÖ TOP 10 PRODUCTOS M√ÅS VENDIDOS:\n');
            productosMasVendidos.forEach((producto, index) => {
                console.log(`${index + 1}. ${producto.nombre}`);
                console.log(`   üì¶ Vendidos: ${producto.total_vendido} unidades`);
                console.log(`   üí∞ Ingresos: Bs.${producto.total_ingresos}`);
                console.log(`   üè∑Ô∏è Categor√≠a: ${producto.categoria}`);
                console.log('---');
            });
        }
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
    this.mostrarMenuPrincipal();
}

// üìà VER ESTAD√çSTICAS AVANZADAS
verEstadisticasAvanzadas() {
    console.log('\nüìà --- ESTAD√çSTICAS AVANZADAS ---');
    try {
        const estadisticas = this.saleManager.getSalesStats(30); // √öltimos 30 d√≠as
        
        if (estadisticas.length === 0) {
            console.log('üìä No hay suficientes datos para estad√≠sticas');
        } else {
            console.log('\nüìä ESTAD√çSTICAS DE LOS √öLTIMOS 30 D√çAS:\n');
            
            let totalVentas = 0;
            let totalIngresos = 0;
            let mejorDia = { fecha: '', ingresos: 0 };
            
            estadisticas.forEach(dia => {
                console.log(`üìÖ ${dia.fecha}:`);
                console.log(`   üõçÔ∏è Ventas: ${dia.total_ventas}`);
                console.log(`   üí∞ Ingresos: Bs.${dia.ingresos_totales}`);
                console.log(`   üìä Promedio por venta: Bs.${dia.promedio_por_venta.toFixed(2)}`);
                console.log('---');
                
                totalVentas += dia.total_ventas;
                totalIngresos += dia.ingresos_totales;
                
                if (dia.ingresos_totales > mejorDia.ingresos) {
                    mejorDia = { fecha: dia.fecha, ingresos: dia.ingresos_totales };
                }
            });
            
            // Resumen general
            console.log('\nüìã RESUMEN GENERAL:');
            console.log(`   üìÖ D√≠as con ventas: ${estadisticas.length}`);
            console.log(`   üõçÔ∏è Total de ventas: ${totalVentas}`);
            console.log(`   üí∞ Ingresos totales: Bs.${totalIngresos}`);
            console.log(`   üìä Promedio diario: Bs.${(totalIngresos / estadisticas.length).toFixed(2)}`);
            console.log(`   üèÜ Mejor d√≠a: ${mejorDia.fecha} (Bs.${mejorDia.ingresos})`);
        }
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
    this.mostrarMenuPrincipal();
}

// ‚ùå CANCELAR VENTA
cancelarVenta() {
    console.log('\n‚ùå --- CANCELAR VENTA ---');
    try {
        // Mostrar ventas recientes
        const ventasRecientes = this.saleManager.getTodaySales();
        
        if (ventasRecientes.length === 0) {
            console.log('üìä No hay ventas recientes para cancelar');
            this.mostrarMenuPrincipal();
            return;
        }
        
        console.log('\nüõí VENTAS RECIENTES DEL D√çA:\n');
        ventasRecientes.forEach(venta => {
            const fecha = new Date(venta.fecha_hora).toLocaleTimeString();
            console.log(`üÜî ${venta.id} - ${fecha} - Total: Bs.${venta.total} - Productos: ${venta.total_productos}`);
        });
        
        this.rl.question('\nüÜî ID de la venta a cancelar: ', (idVenta) => {
            const ventaId = parseInt(idVenta);
            
            // Verificar que la venta existe
            const detalleVenta = this.saleManager.getSaleDetail(ventaId);
            if (!detalleVenta) {
                console.log('‚ùå Venta no encontrada');
                this.mostrarMenuPrincipal();
                return;
            }
            
            console.log('\nüìã DETALLE DE LA VENTA:');
            console.log(`   Fecha: ${new Date(detalleVenta.venta.fecha_hora).toLocaleString()}`);
            console.log(`   Total: Bs.${detalleVenta.venta.total}`);
            console.log('\nüõçÔ∏è Productos:');
            detalleVenta.detalles.forEach(detalle => {
                console.log(`   - ${detalle.producto_nombre} x${detalle.cantidad} - Bs.${detalle.subtotal}`);
            });
            
            this.rl.question('\n‚ö†Ô∏è ¬øEst√°s seguro de cancelar esta venta? (s/n): ', (confirmacion) => {
                if (confirmacion.toLowerCase() === 's') {
                    try {
                        const resultado = this.saleManager.cancelSale(ventaId);
                        console.log('‚úÖ ' + resultado.mensaje);
                        console.log('üì¶ Stock restaurado exitosamente');
                    } catch (error) {
                        console.log('‚ùå Error al cancelar venta:', error.message);
                    }
                } else {
                    console.log('‚ùå Cancelaci√≥n abortada');
                }
                this.mostrarMenuPrincipal();
            });
        });
        
    } catch (error) {
        console.log('‚ùå Error:', error.message);
        this.mostrarMenuPrincipal();
    }
}

}

const app = new ConsoleApp();
app.iniciar();
